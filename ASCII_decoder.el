
(defun ASCII-2-char (ch)
  "Returns the character corresponding to the hexadecimal (two-character) ASCII code given in argument CH."
  (cond
    ((string= ch "20") " ")
    ((string= ch "21") "!")
    ((string= ch "22") "\"")
    ((string= ch "23") "#")
    ((string= ch "24") "$")
    ((string= ch "25") "%")
    ((string= ch "26") "&")
    ((string= ch "27") "'")
    ((string= ch "28") "(")
    ((string= ch "29") ")")
    ((string= ch "2A") "*")
    ((string= ch "2B") "+")
    ((string= ch "2C") ",")
    ((string= ch "2D") "-")
    ((string= ch "2E") ".")
    ((string= ch "2F") "/")
    ((string= ch "30") "0")
    ((string= ch "31") "1")
    ((string= ch "32") "2")
    ((string= ch "33") "3")
    ((string= ch "34") "4")
    ((string= ch "35") "5")
    ((string= ch "36") "6")
    ((string= ch "37") "7")
    ((string= ch "38") "8")
    ((string= ch "39") "9")
    ((string= ch "3A") ":")
    ((string= ch "3B") ";")
    ((string= ch "3C") "<")
    ((string= ch "3D") "=")
    ((string= ch "3E") ">")
    ((string= ch "3F") "?")
    ((string= ch "40") "@")
    ((string= ch "41") "A")
    ((string= ch "42") "B")
    ((string= ch "43") "C")
    ((string= ch "44") "D")
    ((string= ch "45") "E")
    ((string= ch "46") "F")
    ((string= ch "47") "G")
    ((string= ch "48") "H")
    ((string= ch "49") "I")
    ((string= ch "4A") "J")
    ((string= ch "4B") "K")
    ((string= ch "4C") "L")
    ((string= ch "4D") "M")
    ((string= ch "4E") "N")
    ((string= ch "4F") "O")
    ((string= ch "50") "P")
    ((string= ch "51") "Q")
    ((string= ch "52") "R")
    ((string= ch "53") "S")
    ((string= ch "54") "T")
    ((string= ch "55") "U")
    ((string= ch "56") "V")
    ((string= ch "57") "W")
    ((string= ch "58") "X")
    ((string= ch "59") "Y")
    ((string= ch "5A") "Z")
    ((string= ch "5B") "[")
    ((string= ch "5C") "\\")
    ((string= ch "5D") "]")
    ((string= ch "5F") "_")
    ((string= ch "60") "`")
    ((string= ch "61") "a")
    ((string= ch "62") "b")
    ((string= ch "63") "c")
    ((string= ch "64") "d")
    ((string= ch "65") "e")
    ((string= ch "66") "f")
    ((string= ch "67") "g")
    ((string= ch "68") "h")
    ((string= ch "69") "i")
    ((string= ch "6A") "j")
    ((string= ch "6B") "k")
    ((string= ch "6C") "l")
    ((string= ch "6D") "m")
    ((string= ch "6E") "n")
    ((string= ch "6F") "o")
    ((string= ch "70") "p")
    ((string= ch "71") "q")
    ((string= ch "72") "r")
    ((string= ch "73") "s")
    ((string= ch "74") "t")
    ((string= ch "75") "u")
    ((string= ch "76") "v")
    ((string= ch "77") "w")
    ((string= ch "78") "x")
    ((string= ch "79") "y")
    ((string= ch "7A") "z")
    ((string= ch "7B") "{")
    ((string= ch "7C") "|")
    ((string= ch "7D") "}")
    ((string= ch "7E") "~")
    (t "")))
; (describe-function 'ASCII-2-char)

(defun is-even (n)
  "Returns t if N is an even integer and nil if N is an odd integer."
  (= (- (/ n 2.0) (/ n 2)) 0.0))
; (describe-function 'is-even)

(defun char-trans (st)
  "Given string ST of hex ASCII codes, prints out the corresponding decoded string of characters."
  (let (code)
    ;(if (> (length st) 0)
    (if (is-even (length st))
      (while (> (length st) 0)
        (setq code (substring st 0 2))
        ; (y-or-n-p (concat "code = " code))
        (insert (ASCII-2-char code))
        (setq st (substring st 2 (length st)))
        ; (y-or-n-p (concat "st = " st))
      )
      (y-or-n-p "Error: the length of argument ST has to be even."))))
					; (describe-function 'char-trans)

(defun ASCII-decode-1 ()
  "Interactive function which asks for a string of hex ASCII codes and then decodes into a string of decoded characters. (shortcut: A-1))"
  (interactive)
  (let (transcribendum)
    (setq transcribendum (read-string "String to decode: "))
    (char-trans transcribendum)))
; (describe-function 'ASCII-decode-1)

(defun char-trans-0 (st)
  "Like char-trans but without printing."
  (let (code (st-out ""))
    (if (> (length st) 0)
      (if (is-even (length st))
        (while (> (length st) 0)
	  (setq code (substring st 0 2))
	  (setq st-out (concat st-out (ASCII-2-char code)))
	  (setq st (substring st 2 (length st))))
	(y-or-n-p "Error: the length of argument ST has to be even.")))
    st-out))
					; (describe-function 'char-trans-0)

(defun ASCII-decode ()
  "Interactive function which asks for a string of hex ASCII codes and then decodes it into a string of decoded characters. (shortcut: A-d)"
  (interactive)
  (let (transcribendum)
    (setq transcribendum (read-string "String to decode: "))
    (message (char-trans-0 transcribendum))))
; (describe-function 'ASCII-decode)

(defun ASCII-2-char-2 (ch)
  "Like ASCII-2-char but is able to handle (double-)spaces as well."
  (if (string= ch "  ")
    " "
    (ASCII-2-char ch)))
; (describe-function 'ASCII-2-char-2)

(defun char-trans-2 (st)
  "Like char-trans but spaces are left as they are; i.e., they are not encoded into ASCII."
  (let (code)
    (when (> (length st) 0)
      (setq st (string-replace " " "  " st))
      ;(y-or-n-p (concat "st = " st))
      (if (is-even (length st))
	(progn
	  ;(y-or-n-p "st's length is even.")
          (while (> (length st) 0)
            (setq code (substring st 0 2))
					;(setq charnum (aref char 0))
	    (insert (ASCII-2-char-2 code))
            (setq st (substring st 2 (length st))))
	  "OK")
        (y-or-n-p "Error: the length of argument ST has to be even.")))))
					; (describe-function 'char-trans-2)

(defun ASCII-decode-2-1 ()
  "Like ASCII-decode but able to handle spaces in between hex ASCII codes, leaving them as they are. (shortcut: -2-1)"
  (interactive)
  (let (transcribendum)
    (setq transcribendum (read-string "String to decode: "))
    (char-trans-2 transcribendum)))
; (describe-function 'ASCII-encode-2-1)

(defun char-trans-2-0 (st)
  "Like char-trans-2 but without side effect (printing)."
  (let (code st-out)
    (setq st-out "")
    (when (> (length st) 0)
      (setq st (string-replace " " "  " st))
      (if (is-even (length st))
        (while (> (length st) 0)
          (setq code (substring st 0 2))
          (setq st (substring st 2 (length st)))
	  (setq st-out (concat st-out (ASCII-2-char-2 code))))
	(y-or-n-p "Error: the length of argument ST has to be even."))
    st-out)))
; (describe-function 'ASCII-trans-2-0)

(defun ASCII-decode-2 ()
  "Like ASCII-decode but able to handle spaces in between hex ASCII codes, leaving them as they are. (shortcut: -d-2)"
  (interactive)
  (let (transcribendum)
    (setq transcribendum (read-string "String to decode: "))
    ;(y-or-n-p (char-trans-2-0 transcribendum))
    (message (char-trans-2-0 transcribendum))))
					; (describe-function 'ASCII-encode-2)

(defun string-replace (from_string to_string in_string)
  "Replace any occurrences of substring FROM_STRING within IN_STRING with TO_STRING."
  (let ((i 0) sub_ST before_ST after_ST)
    (while (< i (length in_string))
      (setq sub_ST (substring in_string i (min (+ i (length from_string)) (length in_string))))
      (when (string= sub_ST from_string)
        (setq before_ST (substring in_string 0 i))
        (setq after_ST (substring in_string (+ i (length from_string)) (length in_string)))
        (setq in_string (concat before_ST to_string after_ST))
        (setq i (+ i (length to_string)))
        (setq i (1- i))
      )
      (setq i (1+ i)))
    in_string))
